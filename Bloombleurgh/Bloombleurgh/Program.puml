@startuml
'https://plantuml.com/class-diagram

'Inheritance
Window <|- Terminal
Import <|- FileImport
Import <|- WebImport


Component <|- Heading
Component <|- Toolbar
Component <|- Button
Component <|- Panel

Panel <|- CompanyListPanel

'Composition
Terminal *-- CompanyListPanel

CompanyListPanel *-- Company
Company *-- Ticker

'Aggregation

'Used as a base class for terminal, allows for drawing and sizing
'Implement non abstract then make it abstract
abstract class Window {
int x;
int y;
}

'Implement the Terminal as one class first, then break it out into separate modules
class Terminal {
- List<Component> components

+ void DrawAllComponents()
}

abstract class Component {
- int x
- int y
- double length
- double width
- double height

+ Draw()
'Probably want some sort of polymorphic IsAt to handle all styles of rect
+ IsAt()
}

class Heading {}

class Toolbar {
}

class Button {
}

class Panel {
}

class CompanyListPanel {
- List<Company> companyList
}

'Perhaps fuck the import stuff, just use existing input files to start
'Dont bother with having an independent way to call new files, just populate
'from a data directory until everything is working, then add on as a bonus
class Import {
- path storageLocation
- string fileName
- path remoteLocation

+ Import(remoteLocation, storageLocation, fileName)
}

class FileImport {
}

class WebImport {
}

class Company {
- string name
- bool active
- Ticker ticker

+ Company()

__properties__
--getter only--
bool Active
}

class Ticker {
- string code

+ Ticker(code, Company)

--properties--
+ Code
}

abstract class Data {
}

@enduml